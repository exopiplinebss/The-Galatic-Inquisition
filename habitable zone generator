def goldilocks(): 
    
    from astroquery.simbad import Simbad
    star = input()
    customSimbad = Simbad()
    customSimbad.add_votable_fields('sptype')
    customSimbad.add_votable_fields('flux(V)')
    customSimbad.add_votable_fields('distance')
    #customSimbad.list_votable_fields()
    result = customSimbad.query_object(star)
    sptype = result['SP_TYPE'][0].decode() + " " + str(result['SP_QUAL'][0])
    app = float(result['FLUX_V'][0])
    dis = float(result['Distance_distance'][0])
    print("Spectral Type: ", sptype)
    print("Apparent Magnitude: ", app)
    print("Distance: ", dis)
    
    import math
    constant = float(input('Bolometric Correction Constant: '))
    absol = app - 5*math.log10(dis/10)
    answeri = "{0:.2f}".format(absol)
    sentence = 'the absolute magnitude of the star equals {}'.format(answeri) 
    print(sentence)
    Bolo = absol + constant
    answerii = "{0:.2f}".format(Bolo)
    Mbol = 'the bolometric magnitude of the star equals {}'.format(answerii)
    print(Mbol)
    lumen = 10**((Bolo - 4.72) / -2.5)
    answeriii = "{0:.3f}".format(lumen)
    ablumen = 'the absolute luminosity of the star equals {}'.format(answeriii)
    print(ablumen)
    inrad = math.sqrt(float(answeriii)/1.1)
    answeriv = "{0:.1f}".format(inrad)
    inner = 'the inner radius of the habitable zone is {} AU'.format(answeriv)
    print(inner)
    outrad = math.sqrt(float(answeriii)/0.53)
    answerv = "{0:.2f}".format(outrad)
    outer = 'the outer radius of the habitable zone is {} AU'.format(answerv)
    print(outer)
